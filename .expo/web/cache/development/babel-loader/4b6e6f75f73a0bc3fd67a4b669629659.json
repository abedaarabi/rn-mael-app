{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _MealList = require(\"../components/MealList\");\n\nvar _dummyData = require(\"../data/dummy-data\");\n\nvar _Color = _interopRequireDefault(require(\"../constants/Color\"));\n\nvar _mealAction = require(\"../store/actions/mealAction\");\n\nvar _counterSlice = require(\"../redux/counterSlice\");\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\abma\\\\Desktop\\\\React-native\\\\meal-app\\\\screens\\\\CategoryMealsScreen.js\";\n\nvar CategoryMealScreen = function CategoryMealScreen(props) {\n  var categoryId = props.route.params.params.categoryId;\n  var availableMeals = (0, _reactRedux.useSelector)(function (state) {\n    return state.meals.filterMeals;\n  });\n  var displayMeal = availableMeals.filter(function (meal) {\n    return meal.categoryIds.indexOf(categoryId) >= 0;\n  });\n  var dispatch = (0, _reactRedux.useDispatch)();\n\n  _react.default.useLayoutEffect(function () {\n    props.navigation.setOptions({\n      headerRight: function headerRight() {\n        return _react.default.createElement(_reactNative.Button, {\n          title: \"rest\",\n          onPress: function onPress() {\n            dispatch((0, _counterSlice.REST_FILTER)());\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 9\n          }\n        });\n      }\n    });\n  });\n\n  if (availableMeals.length === 0) {\n    return _react.default.createElement(_reactNative.View, {\n      style: styles.screen,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    }, _react.default.createElement(_reactNative.Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }, \"Seelect Filter\"));\n  }\n\n  return _react.default.createElement(_MealList.MealList, {\n    listData: displayMeal,\n    navigation: props.navigation,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 10\n    }\n  });\n};\n\nCategoryMealScreen.navigationOptions = function (navigationData) {\n  var categoryId = navigationData.navigation.getParam(\"categoryId\");\n\n  var catgeoryName = _dummyData.CATEGORIES.find(function (cat) {\n    return cat.id === categoryId;\n  });\n\n  return {\n    headerTitle: catgeoryName.title\n  };\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  screen: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n});\n\nvar _default = CategoryMealScreen;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/abma/Desktop/React-native/meal-app/screens/CategoryMealsScreen.js"],"names":["CategoryMealScreen","props","categoryId","route","params","availableMeals","state","meals","filterMeals","displayMeal","filter","meal","categoryIds","indexOf","dispatch","React","useLayoutEffect","navigation","setOptions","headerRight","length","styles","screen","navigationOptions","navigationData","getParam","catgeoryName","CATEGORIES","find","cat","id","headerTitle","title","StyleSheet","create","flex","justifyContent","alignItems"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AAEA;;;;;AAKA,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAW;AAEpC,MAAQC,UAAR,GAAuBD,KAAK,CAACE,KAAN,CAAYC,MAAZ,CAAmBA,MAA1C,CAAQF,UAAR;AACA,MAAMG,cAAc,GAAG,6BAAY,UAACC,KAAD;AAAA,WAAWA,KAAK,CAACC,KAAN,CAAYC,WAAvB;AAAA,GAAZ,CAAvB;AAEA,MAAMC,WAAW,GAAGJ,cAAc,CAACK,MAAf,CAClB,UAACC,IAAD;AAAA,WAAUA,IAAI,CAACC,WAAL,CAAiBC,OAAjB,CAAyBX,UAAzB,KAAwC,CAAlD;AAAA,GADkB,CAApB;AAGA,MAAMY,QAAQ,GAAG,8BAAjB;;AACAC,iBAAMC,eAAN,CAAsB,YAAM;AAC1Bf,IAAAA,KAAK,CAACgB,UAAN,CAAiBC,UAAjB,CAA4B;AAC1BC,MAAAA,WAAW,EAAE;AAAA,eACX,6BAAC,mBAAD;AACE,UAAA,KAAK,EAAC,MADR;AAEE,UAAA,OAAO,EAAE,mBAAM;AACbL,YAAAA,QAAQ,CAAC,gCAAD,CAAR;AACD,WAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADW;AAAA;AADa,KAA5B;AAUD,GAXD;;AAYA,MAAIT,cAAc,CAACe,MAAf,KAA0B,CAA9B,EAAiC;AAC/B,WACE,6BAAC,iBAAD;AAAM,MAAA,KAAK,EAAEC,MAAM,CAACC,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,6BAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,CADF;AAKD;;AAED,SAAO,6BAAC,kBAAD;AAAU,IAAA,QAAQ,EAAEb,WAApB;AAAiC,IAAA,UAAU,EAAER,KAAK,CAACgB,UAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CA9BD;;AAiCAjB,kBAAkB,CAACuB,iBAAnB,GAAuC,UAACC,cAAD,EAAoB;AACzD,MAAMtB,UAAU,GAAGsB,cAAc,CAACP,UAAf,CAA0BQ,QAA1B,CAAmC,YAAnC,CAAnB;;AAEA,MAAMC,YAAY,GAAGC,sBAAWC,IAAX,CAAgB,UAACC,GAAD;AAAA,WAASA,GAAG,CAACC,EAAJ,KAAW5B,UAApB;AAAA,GAAhB,CAArB;;AACA,SAAO;AACL6B,IAAAA,WAAW,EAAEL,YAAY,CAACM;AADrB,GAAP;AAGD,CAPD;;AASA,IAAMX,MAAM,GAAGY,wBAAWC,MAAX,CAAkB;AAC/BZ,EAAAA,MAAM,EAAE;AACNa,IAAAA,IAAI,EAAE,CADA;AAENC,IAAAA,cAAc,EAAE,QAFV;AAGNC,IAAAA,UAAU,EAAE;AAHN;AADuB,CAAlB,CAAf;;eAOerC,kB","sourcesContent":["import React from \"react\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\nimport { Text, View, StyleSheet, Button } from \"react-native\";\r\nimport { MealList } from \"../components/MealList\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { CATEGORIES } from \"../data/dummy-data\";\r\nimport Color from \"../constants/Color\";\r\nimport { restFilter } from \"../store/actions/mealAction\";\r\n\r\nimport {\r\n  TOGGLE_FAVORITE,\r\n  FILTERED_MEALS,\r\n  REST_FILTER,\r\n} from \"../redux/counterSlice\";\r\nconst CategoryMealScreen = (props) => {\r\n  // const categoryId = props.navigation.getParam(\"categoryId\");\r\n  const { categoryId } = props.route.params.params;\r\n  const availableMeals = useSelector((state) => state.meals.filterMeals);\r\n\r\n  const displayMeal = availableMeals.filter(\r\n    (meal) => meal.categoryIds.indexOf(categoryId) >= 0\r\n  );\r\n  const dispatch = useDispatch();\r\n  React.useLayoutEffect(() => {\r\n    props.navigation.setOptions({\r\n      headerRight: () => (\r\n        <Button\r\n          title=\"rest\"\r\n          onPress={() => {\r\n            dispatch(REST_FILTER());\r\n          }}\r\n        />\r\n      ),\r\n    });\r\n  });\r\n  if (availableMeals.length === 0) {\r\n    return (\r\n      <View style={styles.screen}>\r\n        <Text>Seelect Filter</Text>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  return <MealList listData={displayMeal} navigation={props.navigation} />;\r\n};\r\n\r\n//pass dynamic data: beacuse we don't have any access to component props!\r\nCategoryMealScreen.navigationOptions = (navigationData) => {\r\n  const categoryId = navigationData.navigation.getParam(\"categoryId\");\r\n\r\n  const catgeoryName = CATEGORIES.find((cat) => cat.id === categoryId);\r\n  return {\r\n    headerTitle: catgeoryName.title,\r\n  };\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  screen: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n});\r\nexport default CategoryMealScreen;\r\n"]},"metadata":{},"sourceType":"script"}