{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = App;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar Font = _interopRequireWildcard(require(\"expo-font\"));\n\nvar _expoAppLoading = _interopRequireDefault(require(\"expo-app-loading\"));\n\nvar _MealNavigator = require(\"./navigation/MealNavigator\");\n\nvar _reactNativeScreens = require(\"react-native-screens\");\n\nvar _meals = require(\"./store/reducers/meals\");\n\nvar _redux = require(\"redux\");\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _store = require(\"./redux/store\");\n\nvar _jsxFileName = \"C:\\\\Users\\\\abma\\\\Desktop\\\\React-native\\\\meal-app\\\\App.js\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n(0, _reactNativeScreens.enableFreeze)(true);\n\nvar fetchFonts = function fetchFonts() {\n  return Font.loadAsync({\n    \"open-sans-bold\": require(\"./assets/fonts/OpenSans-Bold.ttf\"),\n    \"open-sans\": require(\"./assets/fonts/OpenSans-Regular.ttf\")\n  });\n};\n\nfunction App() {\n  var _React$useState = _react.default.useState(false),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      fontLoaded = _React$useState2[0],\n      setFontLoaded = _React$useState2[1];\n\n  if (!fontLoaded) {\n    return _react.default.createElement(_expoAppLoading.default, {\n      startAsync: fetchFonts,\n      onFinish: function onFinish() {\n        return setFontLoaded(true);\n      },\n      onError: function onError(err) {\n        return console.log(err);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }\n    });\n  }\n\n  return _react.default.createElement(_reactRedux.Provider, {\n    store: _store.store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_MealNavigator.DrawerNavigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }));\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});","map":{"version":3,"sources":["C:/Users/abma/Desktop/React-native/meal-app/App.js"],"names":["fetchFonts","Font","loadAsync","require","App","React","useState","fontLoaded","setFontLoaded","err","console","log","store","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;AACA,sCAAa,IAAb;;AAEA,IAAMA,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,SAAOC,IAAI,CAACC,SAAL,CAAe;AACpB,sBAAkBC,OAAO,CAAC,kCAAD,CADL;AAEpB,iBAAaA,OAAO,CAAC,qCAAD;AAFA,GAAf,CAAP;AAID,CALD;;AAYe,SAASC,GAAT,GAAe;AAC5B,wBAAoCC,eAAMC,QAAN,CAAe,KAAf,CAApC;AAAA;AAAA,MAAOC,UAAP;AAAA,MAAmBC,aAAnB;;AAEA,MAAI,CAACD,UAAL,EAAiB;AACf,WACE,6BAAC,uBAAD;AACE,MAAA,UAAU,EAAEP,UADd;AAEE,MAAA,QAAQ,EAAE;AAAA,eAAMQ,aAAa,CAAC,IAAD,CAAnB;AAAA,OAFZ;AAGE,MAAA,OAAO,EAAE,iBAACC,GAAD;AAAA,eAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAT;AAAA,OAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOD;;AAGD,SACE,6BAAC,oBAAD;AAAU,IAAA,KAAK,EAAEG,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,6BAAC,8BAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;;AAED,IAAMC,MAAM,GAAGC,wBAAWC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP;AADoB,CAAlB,CAAf","sourcesContent":["import React from \"react\";\r\n\r\nimport { StyleSheet, Text, View } from \"react-native\";\r\nimport * as Font from \"expo-font\";\r\nimport AppLoading from \"expo-app-loading\";\r\nimport { DrawerNavigator } from \"./navigation/MealNavigator\";\r\nimport { enableFreeze } from \"react-native-screens\";\r\nimport { mealsReducer } from \"./store/reducers/meals\";\r\n//improve performance\r\nimport { createStore, combineReducers } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport {store} from \"./redux/store\"\r\nenableFreeze(true);\r\n\r\nconst fetchFonts = () => {\r\n  return Font.loadAsync({\r\n    \"open-sans-bold\": require(\"./assets/fonts/OpenSans-Bold.ttf\"),\r\n    \"open-sans\": require(\"./assets/fonts/OpenSans-Regular.ttf\"),\r\n  });\r\n};\r\n\r\n// const rootReducer = combineReducers({\r\n//   meals: mealsReducer,\r\n// });\r\n// const store = createStore(rootReducer);\r\n\r\nexport default function App() {\r\n  const [fontLoaded, setFontLoaded] = React.useState(false);\r\n\r\n  if (!fontLoaded) {\r\n    return (\r\n      <AppLoading\r\n        startAsync={fetchFonts}\r\n        onFinish={() => setFontLoaded(true)}\r\n        onError={(err) => console.log(err)}\r\n      />\r\n    );\r\n  }\r\n  // return <MealNavigator />;\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <DrawerNavigator />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#fff\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"script"}