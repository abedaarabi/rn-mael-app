{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.counterSlice = exports.TOGGLE_FAVORITE = exports.REST_FILTER = exports.FILTERED_MEALS = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _toolkit = require(\"@reduxjs/toolkit\");\n\nvar _dummyData = require(\"../data/dummy-data\");\n\nvar initialState = {\n  meals: _dummyData.MEALS,\n  filterMeals: [],\n  favoriteMeals: []\n};\nvar counterSlice = (0, _toolkit.createSlice)({\n  name: \"meals\",\n  initialState: initialState,\n  reducers: {\n    TOGGLE_FAVORITE: function TOGGLE_FAVORITE(state, action) {\n      try {\n        var isIndex = state.favoriteMeals.findIndex(function (meal) {\n          return meal.id === action.payload;\n        });\n        console.log(isIndex);\n\n        if (isIndex >= 0) {\n          var updatedFavMeals = (0, _toConsumableArray2.default)(state.favoriteMeals);\n          updatedFavMeals.splice(isIndex, 1);\n          return (0, _extends2.default)({}, state, {\n            favoriteMeals: updatedFavMeals\n          });\n        } else {\n          var addedMeal = state.meals.find(function (meal) {\n            return meal.id === action.mealId;\n          });\n          return (0, _extends2.default)({}, state, {\n            favoriteMeals: state.favoriteMeals.concat(addedMeal)\n          });\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    FILTERED_MEALS: function FILTERED_MEALS(state, action) {\n      var applyFilter = action.payload;\n      var updateFilterMeals = state.meals.filter(function (meal) {\n        if (applyFilter.gultenFree && meal.isGlutenFree) {\n          return true;\n        }\n\n        if (applyFilter.lactoseFree && meal.isLactoseFree) {\n          return true;\n        }\n\n        if (applyFilter.vegan && meal.isVegan) {\n          return true;\n        }\n\n        if (applyFilter.vegetarian && meal.isVegetarian) {\n          return true;\n        }\n      });\n      return (0, _extends2.default)({}, state, {\n        filterMeals: updateFilterMeals\n      });\n    },\n    REST_FILTER: function REST_FILTER(state, action) {\n      return (0, _extends2.default)({}, state, {\n        filterMeals: state.meals\n      });\n    }\n  }\n});\nexports.counterSlice = counterSlice;\nvar _counterSlice$actions = counterSlice.actions,\n    TOGGLE_FAVORITE = _counterSlice$actions.TOGGLE_FAVORITE,\n    FILTERED_MEALS = _counterSlice$actions.FILTERED_MEALS,\n    REST_FILTER = _counterSlice$actions.REST_FILTER;\nexports.REST_FILTER = REST_FILTER;\nexports.FILTERED_MEALS = FILTERED_MEALS;\nexports.TOGGLE_FAVORITE = TOGGLE_FAVORITE;\nvar _default = counterSlice.reducer;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/abma/Desktop/React-native/meal-app/redux/counterSlice.js"],"names":["initialState","meals","MEALS","filterMeals","favoriteMeals","counterSlice","name","reducers","TOGGLE_FAVORITE","state","action","isIndex","findIndex","meal","id","payload","console","log","updatedFavMeals","splice","addedMeal","find","mealId","concat","error","FILTERED_MEALS","applyFilter","updateFilterMeals","filter","gultenFree","isGlutenFree","lactoseFree","isLactoseFree","vegan","isVegan","vegetarian","isVegetarian","REST_FILTER","actions","reducer"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;AAEA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAEC,gBADY;AAEnBC,EAAAA,WAAW,EAAE,EAFM;AAGnBC,EAAAA,aAAa,EAAE;AAHI,CAArB;AAMO,IAAMC,YAAY,GAAG,0BAAY;AACtCC,EAAAA,IAAI,EAAE,OADgC;AAEtCN,EAAAA,YAAY,EAAZA,YAFsC;AAGtCO,EAAAA,QAAQ,EAAE;AACRC,IAAAA,eAAe,EAAE,yBAACC,KAAD,EAAQC,MAAR,EAAmB;AAClC,UAAI;AACF,YAAMC,OAAO,GAAGF,KAAK,CAACL,aAAN,CAAoBQ,SAApB,CACd,UAACC,IAAD;AAAA,iBAAUA,IAAI,CAACC,EAAL,KAAYJ,MAAM,CAACK,OAA7B;AAAA,SADc,CAAhB;AAGAC,QAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ;;AACA,YAAIA,OAAO,IAAI,CAAf,EAAkB;AAChB,cAAMO,eAAe,oCAAOT,KAAK,CAACL,aAAb,CAArB;AACAc,UAAAA,eAAe,CAACC,MAAhB,CAAuBR,OAAvB,EAAgC,CAAhC;AACA,4CACKF,KADL;AAEEL,YAAAA,aAAa,EAAEc;AAFjB;AAID,SAPD,MAOO;AACL,cAAME,SAAS,GAAGX,KAAK,CAACR,KAAN,CAAYoB,IAAZ,CAChB,UAACR,IAAD;AAAA,mBAAUA,IAAI,CAACC,EAAL,KAAYJ,MAAM,CAACY,MAA7B;AAAA,WADgB,CAAlB;AAGA,4CACKb,KADL;AAEEL,YAAAA,aAAa,EAAEK,KAAK,CAACL,aAAN,CAAoBmB,MAApB,CAA2BH,SAA3B;AAFjB;AAID;AACF,OArBD,CAqBE,OAAOI,KAAP,EAAc;AACdR,QAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACD;AACF,KA1BO;AA2BRC,IAAAA,cAAc,EAAE,wBAAChB,KAAD,EAAQC,MAAR,EAAmB;AACjC,UAAMgB,WAAW,GAAGhB,MAAM,CAACK,OAA3B;AAEA,UAAMY,iBAAiB,GAAGlB,KAAK,CAACR,KAAN,CAAY2B,MAAZ,CAAmB,UAACf,IAAD,EAAU;AACrD,YAAIa,WAAW,CAACG,UAAZ,IAA0BhB,IAAI,CAACiB,YAAnC,EAAiD;AAC/C,iBAAO,IAAP;AACD;;AACD,YAAIJ,WAAW,CAACK,WAAZ,IAA2BlB,IAAI,CAACmB,aAApC,EAAmD;AACjD,iBAAO,IAAP;AACD;;AACD,YAAIN,WAAW,CAACO,KAAZ,IAAqBpB,IAAI,CAACqB,OAA9B,EAAuC;AACrC,iBAAO,IAAP;AACD;;AACD,YAAIR,WAAW,CAACS,UAAZ,IAA0BtB,IAAI,CAACuB,YAAnC,EAAiD;AAC/C,iBAAO,IAAP;AACD;AACF,OAbyB,CAA1B;AAcA,wCAAY3B,KAAZ;AAAmBN,QAAAA,WAAW,EAAEwB;AAAhC;AACD,KA7CO;AA8CRU,IAAAA,WAAW,EAAE,qBAAC5B,KAAD,EAAQC,MAAR,EAAmB;AAC9B,wCAAYD,KAAZ;AAAmBN,QAAAA,WAAW,EAAEM,KAAK,CAACR;AAAtC;AACD;AAhDO;AAH4B,CAAZ,CAArB;;AAwDA,4BACLI,YAAY,CAACiC,OADR;AAAA,IAAQ9B,eAAR,yBAAQA,eAAR;AAAA,IAAyBiB,cAAzB,yBAAyBA,cAAzB;AAAA,IAAyCY,WAAzC,yBAAyCA,WAAzC;;;;eAGQhC,YAAY,CAACkC,O","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nimport { MEALS } from \"../data/dummy-data\";\r\n\r\nconst initialState = {\r\n  meals: MEALS,\r\n  filterMeals: [],\r\n  favoriteMeals: [],\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n  name: \"meals\",\r\n  initialState,\r\n  reducers: {\r\n    TOGGLE_FAVORITE: (state, action) => {\r\n      try {\r\n        const isIndex = state.favoriteMeals.findIndex(\r\n          (meal) => meal.id === action.payload\r\n        );\r\n        console.log(isIndex);\r\n        if (isIndex >= 0) {\r\n          const updatedFavMeals = [...state.favoriteMeals];\r\n          updatedFavMeals.splice(isIndex, 1);\r\n          return {\r\n            ...state,\r\n            favoriteMeals: updatedFavMeals,\r\n          };\r\n        } else {\r\n          const addedMeal = state.meals.find(\r\n            (meal) => meal.id === action.mealId\r\n          );\r\n          return {\r\n            ...state,\r\n            favoriteMeals: state.favoriteMeals.concat(addedMeal),\r\n          };\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    },\r\n    FILTERED_MEALS: (state, action) => {\r\n      const applyFilter = action.payload;\r\n\r\n      const updateFilterMeals = state.meals.filter((meal) => {\r\n        if (applyFilter.gultenFree && meal.isGlutenFree) {\r\n          return true;\r\n        }\r\n        if (applyFilter.lactoseFree && meal.isLactoseFree) {\r\n          return true;\r\n        }\r\n        if (applyFilter.vegan && meal.isVegan) {\r\n          return true;\r\n        }\r\n        if (applyFilter.vegetarian && meal.isVegetarian) {\r\n          return true;\r\n        }\r\n      });\r\n      return { ...state, filterMeals: updateFilterMeals };\r\n    },\r\n    REST_FILTER: (state, action) => {\r\n      return { ...state, filterMeals: state.meals };\r\n    },\r\n  },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { TOGGLE_FAVORITE, FILTERED_MEALS, REST_FILTER } =\r\n  counterSlice.actions;\r\n\r\nexport default counterSlice.reducer;\r\n"]},"metadata":{},"sourceType":"script"}